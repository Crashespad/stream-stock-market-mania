
-- Create streamers table to store streamer data
CREATE TABLE public.streamers (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  platform TEXT NOT NULL,
  price NUMERIC NOT NULL,
  change NUMERIC NOT NULL,
  change_percent NUMERIC NOT NULL,
  followers INT NOT NULL,
  avg_viewers INT NOT NULL,
  avatar TEXT,
  created_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Allow public read access to streamers table
ALTER TABLE public.streamers ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access to streamers" ON public.streamers FOR SELECT USING (true);


-- Create profiles table to store user data
CREATE TABLE public.profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  username TEXT UNIQUE,
  avatar_url TEXT,
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- RLS for profiles table
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow authenticated user to view profiles" ON public.profiles FOR SELECT TO authenticated USING (true);
CREATE POLICY "Users can insert their own profile" ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Users can update their own profile" ON public.profiles FOR UPDATE USING (auth.uid() = id);


-- Create balances table to store user cash balance
CREATE TABLE public.balances (
  user_id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  balance NUMERIC NOT NULL DEFAULT 100000,
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- RLS for balances table
ALTER TABLE public.balances ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own balance" ON public.balances FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can update their own balance" ON public.balances FOR UPDATE USING (auth.uid() = user_id);


-- Create portfolio table to store user holdings
CREATE TABLE public.portfolio (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  streamer_id BIGINT NOT NULL REFERENCES public.streamers(id) ON DELETE CASCADE,
  shares INT NOT NULL,
  avg_price NUMERIC NOT NULL,
  updated_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE (user_id, streamer_id)
);

-- RLS for portfolio table
ALTER TABLE public.portfolio ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own portfolio" ON public.portfolio FOR ALL USING (auth.uid() = user_id);


-- Create transactions table to log trades
CREATE TABLE public.transactions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  streamer_id BIGINT NOT NULL REFERENCES public.streamers(id) ON DELETE CASCADE,
  type TEXT NOT NULL CHECK (type IN ('buy', 'sell')),
  shares INT NOT NULL,
  price NUMERIC NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now()
);

-- RLS for transactions table
ALTER TABLE public.transactions ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own transactions" ON public.transactions FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can insert their own transactions" ON public.transactions FOR INSERT WITH CHECK (auth.uid() = user_id);


-- Function to create a profile and balance for a new user
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
BEGIN
  INSERT INTO public.profiles (id, username, avatar_url)
  VALUES (new.id, new.raw_user_meta_data->>'user_name', new.raw_user_meta_data->>'avatar_url');
  
  INSERT INTO public.balances (user_id, balance)
  VALUES (new.id, 100000);
  
  RETURN new;
END;
$$;

-- Trigger to call the function on new user signup
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- Insert some initial streamer data
INSERT INTO public.streamers (name, platform, price, change, change_percent, followers, avg_viewers, avatar) VALUES
('xQc', 'twitch', 150.75, 5.25, 3.6, 11800000, 65000, 'https://static-cdn.jtvnw.net/jtv_user_pictures/xqc-profile_image-9298d2877057642a-300x300.png'),
('Ninja', 'twitch', 125.50, -2.10, -1.6, 18500000, 25000, 'https://static-cdn.jtvnw.net/jtv_user_pictures/ninja-profile_image-d20f0653846b3a4a-300x300.png'),
('PewDiePie', 'youtube', 210.00, 10.50, 5.3, 111000000, 80000, 'https://yt3.ggpht.com/ytc/AAUvwni4sS08L-0J6jB5lT_sK7p_k_iS_sZqGgYwYw=s900-c-k-c0x00ffffff-no-rj'),
('shroud', 'twitch', 180.20, 1.80, 1.0, 10300000, 35000, 'https://static-cdn.jtvnw.net/jtv_user_pictures/shroud-profile_image-883907c0a6199343-300x300.png'),
('Auronplay', 'twitch', 95.80, -0.40, -0.4, 15400000, 105000, 'https://static-cdn.jtvnw.net/jtv_user_pictures/auronplay-profile_image-f1e1933e2213190a-300x300.png'),
('Ibai', 'twitch', 110.30, 3.15, 2.9, 15000000, 115000, 'https://static-cdn.jtvnw.net/jtv_user_pictures/ibai-profile_image-6623e142e97ca77f-300x300.png'),
('MrBeast', 'youtube', 350.00, 25.00, 7.7, 250000000, 1500000, 'https://yt3.ggpht.com/ytc/AAUvwnjV-G9_s9Q6r_A-stxWJbXzT-wUaXmYJzQzZ8w=s900-c-k-c0x00ffffff-no-rj'),
('Rubius', 'twitch', 88.60, 1.10, 1.3, 14000000, 75000, 'https://static-cdn.jtvnw.net/jtv_user_pictures/elrubius-profile_image-14378e91f349d949-300x300.png'),
('Pokimane', 'twitch', 75.45, -1.55, -2.0, 9300000, 15000, 'https://static-cdn.jtvnw.net/jtv_user_pictures/pokimane-profile_image-93322b467e433f5d-300x300.png'),
('TheGrefg', 'twitch', 65.90, 0.75, 1.2, 11400000, 60000, 'https://static-cdn.jtvnw.net/jtv_user_pictures/thegrefg-profile_image-1b392e21b7233f2d-300x300.png');

